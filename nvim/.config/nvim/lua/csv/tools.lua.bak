-- ~/.config/nvim/lua/csv/sort.lua
-- CSV / TSV utilities for Neovim:
-- Sorting, selecting, and aligning columns
-- Every command opens results in a new scratch window

------------------------------------------------------------
-- Helper: detect delimiter automatically
------------------------------------------------------------
local function detect_delim()
  local first_line = vim.fn.getline(1)
  if first_line:find("\t") then
    return "\t"
  elseif first_line:find(";") then
    return ";"
  else
    return ","
  end
end

------------------------------------------------------------
-- Helper: open results in a new scratch buffer
------------------------------------------------------------
local function open_in_new_window(lines, title)
  vim.cmd("new") -- horizontal split; use vnew for vertical
  vim.bo.buftype = "nofile"
  vim.bo.bufhidden = "wipe"
  vim.bo.swapfile = false
  vim.bo.filetype = "csv"
  vim.api.nvim_buf_set_lines(0, 0, -1, false, lines)
  vim.bo.modified = false
  if title then
    vim.api.nvim_buf_set_name(0, "[CSV: " .. title .. "]")
  end
end

------------------------------------------------------------
-- Helper: run a shell command on the current buffer's text
------------------------------------------------------------
local function run_shell_on_buffer(cmd, title)
  local buf = vim.api.nvim_get_current_buf()
  local lines = vim.api.nvim_buf_get_lines(buf, 0, -1, false)
  local input = table.concat(lines, "\n")

  -- run through /bin/sh so pipes and redirection work properly
  local full_cmd = { "sh", "-c", cmd }
  local output = vim.fn.systemlist(full_cmd, input)

  if vim.v.shell_error ~= 0 then
    vim.notify("Command failed: " .. cmd, vim.log.levels.ERROR)
    return
  end

  open_in_new_window(output, title)
end

------------------------------------------------------------
-- Sorting logic
------------------------------------------------------------
local function csv_sort(col, mode)
  local delim = detect_delim()
  local sort_flag = ""
  if mode == "num" then
    sort_flag = "n"
  elseif mode == "numrev" then
    sort_flag = "nr"
  elseif mode == "alpha" then
    sort_flag = ""
  elseif mode == "alpharev" then
    sort_flag = "r"
  end
  local cmd = string.format("sort -t '%s' -k%d,%d%s", delim, col, col, sort_flag)
  run_shell_on_buffer(cmd, "Sort(" .. col .. ")")
end

local function make_csv_sort_cmd(name, mode, desc)
  vim.api.nvim_create_user_command(name, function(opts)
    local col = tonumber(opts.args)
    if not col then
      vim.notify("Usage: :" .. name .. " {column_number}", vim.log.levels.ERROR)
      return
    end
    csv_sort(col, mode)
  end, { nargs = 1, desc = desc })
end

------------------------------------------------------------
-- Column selector
------------------------------------------------------------
local function csv_select(columns)
  if columns == "" then
    vim.notify("Usage: :CSVSelect {columns}", vim.log.levels.ERROR)
    return
  end
  local delim = detect_delim()
  local fields = {}
  for col in string.gmatch(columns, "%d+") do
    table.insert(fields, string.format("$%s", col))
  end
  local expr = table.concat(fields, ", ")
  local awk_cmd = string.format([[awk -F'%s' -v OFS='%s' '{ print %s }']], delim, delim, expr)
  run_shell_on_buffer(awk_cmd, "Select(" .. columns .. ")")
end

vim.api.nvim_create_user_command("CSVSelect", function(opts)
  csv_select(opts.args)
end, { nargs = 1, desc = "Show only the specified CSV columns (e.g. :CSVSelect 1,3,5)" })

------------------------------------------------------------
-- Alignment (pretty print columns)
------------------------------------------------------------
vim.api.nvim_create_user_command("CSVAlign", function()
  local delim = detect_delim()
  -- use shell so the pipe works correctly
  local cmd = string.format([[cat | column -t -s"%s"]], delim)
  run_shell_on_buffer(cmd, "Align")
end, { desc = "Align CSV columns (no borders, opens in new window)" })

------------------------------------------------------------
-- Register sort commands
------------------------------------------------------------
make_csv_sort_cmd("CSVSortNum", "num", "Sort CSV numerically ascending by column")
make_csv_sort_cmd("CSVSortNumRev", "numrev", "Sort CSV numerically descending by column")
make_csv_sort_cmd("CSVSortAlpha", "alpha", "Sort CSV alphabetically ascending by column")
make_csv_sort_cmd("CSVSortAlphaRev", "alpharev", "Sort CSV alphabetically descending by column")

vim.notify("CSV commands loaded: sort / select / align (open in new window)", vim.log.levels.INFO)
